{"version":3,"file":"component---src-templates-post-template-tsx-d6f161a9dde8e8b9909b.js","mappings":"0PAUA,IAAMA,GAAsB,cAAH,oBAAG,CAAH,6JAYnBC,GAAe,cAAH,oBAAG,CAAH,0MAaZC,GAAQ,cAAH,oBAAG,CAAH,kOAaLC,GAAW,cAAH,oBAAG,CAAH,uIA6Bd,EArB2D,YAIxD,IAHDC,EAGC,EAHDA,MACAC,EAEC,EAFDA,KACAC,EACC,EADDA,WAIA,OACE,QAACN,EAAD,MACE,QAACC,EAAD,CAAcM,QAJC,kBAAMC,OAAOC,QAAQC,UAKlC,QAAC,MAAD,QAEF,QAACR,EAAD,KAAQE,IACR,QAACD,EAAD,MACE,mBAAMG,EAAWK,KAAK,SACtB,mBAAMN,MCvDd,IAAMO,GAAkB,cAAH,oBAAG,CAAH,qEAKfC,GAAkB,QAAO,SAACC,GAAD,OAC7B,QAAC,EAAAC,GAAD,UAAiBD,EAAjB,CAAwBE,MAAO,CAAEC,SAAU,iBADrB,sBAAH,iDAqBrB,EAdmD,YAKhD,IAJDb,EAIC,EAJDA,MACAC,EAGC,EAHDA,KACAC,EAEC,EAFDA,WACAY,EACC,EADDA,UAEA,OACE,QAACN,EAAD,MACE,QAACC,EAAD,CAAiBM,MAAOD,EAAWE,IAAI,eACvC,QAAC,EAAD,CAAchB,MAAOA,EAAOC,KAAMA,EAAMC,WAAYA,MC9B1D,IAAMe,GAAmB,cAAH,oBAAG,CAAH,4wBAwGtB,EARyD,YAAoB,IAARC,EAAQ,EAARA,KACnE,OACE,oBACE,QAACD,EAAD,CAAkBE,wBAAyB,CAAEC,OAAQF,O,UCjE3D,EA1ByC,WACvC,IAAMG,GAAUC,EAAAA,EAAAA,aAuBhB,OArBAC,EAAAA,EAAAA,YAAU,WACR,GAAwB,OAApBF,EAAQG,QAAZ,CAEA,IAAMC,EAAgCC,SAASC,cAAc,UAEvDC,EAAuC,CAC3CC,IAtBM,+BAuBNC,KAtBO,8BAuBP,aAAc,WACdC,MAAO,UACPC,MAAO,eACPC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQR,GAAYS,SAAQ,YAAkB,IAAhBC,EAAgB,KAAXC,EAAW,KACnDd,EAAWe,aAAaF,EAAKC,MAG/BlB,EAAQG,QAAQiB,YAAYhB,MAC3B,KACI,eAAKiB,IAAKrB,KCkBnB,EArC2D,YAKxD,IAHsBsB,EAGtB,EAJDC,KACEC,kBAAqBF,MAEXG,EACX,EADDC,SAAYD,KAGZ,EAcIH,EAAM,GAbRK,KACE9B,EAFJ,EAEIA,KAFJ,IAGI+B,YACEjD,EAJN,EAIMA,MACAkD,EALN,EAKMA,QACAjD,EANN,EAMMA,KACAC,EAPN,EAOMA,WAPN,IAQMY,UACqBqC,EAT3B,EASQC,gBAAmBD,gBACnBE,EAVR,EAUQA,UAKR,OACE,QAACC,EAAA,EAAD,CAAUtD,MAAOA,EAAOuD,YAAaL,EAASM,IAAKV,EAAM/B,MAAOsC,IAC9D,QAACI,EAAA,EAAD,OACA,QAAC,EAAD,CACEzD,MAAOA,EACPC,KAAMA,EACNC,WAAYA,EACZY,UAAWqC,KAEb,QAAC,EAAD,CAAajC,KAAMA,KACnB,QAAC,EAAD","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { ImArrowLeft2 } from 'react-icons/im'\n\nexport type PostHeadInfoProps = {\n  title: string\n  date: string\n  categories: string[]\n}\n\nconst PostHeadInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  height: 100%;\n  margin: 0 auto;\n  padding: 60px 0;\n  color: #ffffff;\n  position: relative;\n  z-index: 2;\n`\n\nconst PrevPageIcon = styled.div`\n  display: grid;\n  place-items: center;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background: #ffffff;\n  color: #000000;\n  font-size: 22px;\n  cursor: pointer;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n`\n\nconst Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  overflow-wrap: break-word;\n  margin-top: auto;\n  text-overflow: ellipsis;\n  white-space: normal;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 45px;\n  font-weight: 800;\n`\n\nconst PostData = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 10px;\n  font-size: 18px;\n  font-weight: 700;\n`\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = function ({\n  title,\n  date,\n  categories,\n}) {\n  const goBackPage = () => window.history.back()\n\n  return (\n    <PostHeadInfoWrapper>\n      <PrevPageIcon onClick={goBackPage}>\n        <ImArrowLeft2 />\n      </PrevPageIcon>\n      <Title>{title}</Title>\n      <PostData>\n        <div>{categories.join(' / ')}</div>\n        <div>{date}</div>\n      </PostData>\n    </PostHeadInfoWrapper>\n  )\n}\n\nexport default PostHeadInfo\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\nimport { PostType } from 'components/Main/PostList'\nimport PostHeadInfo, { PostHeadInfoProps } from 'components/Post/PostHeadInfo'\n\ntype GatsbyImgProps = {\n  image: IGatsbyImageData\n  alt: string\n  className?: string\n}\n\ntype PostHeadProps = PostHeadInfoProps & {\n  thumbnail: IGatsbyImageData\n}\n\nconst PostHeadWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  height: 300px;\n`\nconst BackgroundImage = styled((props: GatsbyImgProps) => (\n  <GatsbyImage {...props} style={{ position: 'absolute' }} />\n))`\n  width: 100%;\n  height: 100%;\n`\n\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\n  title,\n  date,\n  categories,\n  thumbnail,\n}) {\n  return (\n    <PostHeadWrapper>\n      <BackgroundImage image={thumbnail} alt=\"thumbnail\" />\n      <PostHeadInfo title={title} date={date} categories={categories} />\n    </PostHeadWrapper>\n  )\n}\n\nexport default PostHead\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ninterface PostContentProps {\n  html: string\n}\n\nconst MarkdownRenderer = styled.div`\n  // Renderer Style\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  margin: 0 auto;\n  padding: 100px 0;\n  word-break: break-all;\n\n  // Markdown Style\n  line-height: 1.8;\n  font-size: 16px;\n  font-weight: 400;\n\n  // Apply Padding Attribute to All Elements\n  p {\n    padding: 3px 0;\n  }\n\n  // Adjust Heading Element Style\n  h1,\n  h2,\n  h3 {\n    font-weight: 800;\n    margin-bottom: 30px;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 80px;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  h1 {\n    font-size: 30px;\n  }\n\n  h2 {\n    font-size: 25px;\n  }\n\n  h3 {\n    font-size: 20px;\n  }\n\n  // Adjust Quotation Element Style\n  blockquote {\n    margin: 30px 0;\n    padding: 5px 15px;\n    border-left: 2px solid #000000;\n    font-weight: 800;\n  }\n\n  // Adjust List Element Style\n  ol,\n  ul {\n    margin-left: 20px;\n    padding: 30px 0;\n  }\n\n  // Adjust Horizontal Rule style\n  hr {\n    border: 1px solid #000000;\n    margin: 100px 0;\n  }\n\n  // Adjust Link Element Style\n  a {\n    color: #4263eb;\n    text-decoration: underline;\n  }\n\n  // Adjust Code Style\n  pre[class*='language-'] {\n    margin: 30px 0;\n    padding: 15px;\n    font-size: 15px;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 3px;\n    }\n  }\n\n  code[class*='language-'],\n  pre[class*='language-'] {\n    tab-size: 2;\n  }\n`\n\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\n  return (\n    <div>\n      <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n    </div>\n  )\n}\n\nexport default PostContent\n","import React, { createRef, FunctionComponent, useEffect } from 'react'\n\nconst src = 'htps://utteranc.es/client.js'\nconst repo = 'siennapp/siennapp.github.io'\n\ntype UtterancesAttributesType = {\n  src: string\n  repo: string\n  'issue-term': string\n  label: string\n  theme: string\n  crossorigin: string\n  async: string\n}\n\nconst CommentWidget: FunctionComponent = function () {\n  const element = createRef<HTMLDivElement>()\n\n  useEffect(() => {\n    if (element.current === null) return\n\n    const utterances: HTMLScriptElement = document.createElement('script')\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'Comment',\n      theme: `github-light`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    element.current.appendChild(utterances)\n  }, [])\n  return <div ref={element} />\n}\nexport default CommentWidget\n","import React, { FunctionComponent } from 'react'\nimport { graphql } from 'gatsby'\nimport { PostPageItemType } from 'types/PostItem.types'\nimport Template from 'components/Common/Template'\nimport PostHead from 'components/Post/PostHead'\nimport PostContent from 'components/Post/PostContent'\nimport Header from 'components/Common/Header'\nimport CommentWidget from 'components/Post/CommentWidget'\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n  }\n  location: {\n    href: string\n  }\n}\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}) {\n  //console.log(props)\n  const {\n    node: {\n      html,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n          publicURL,\n        },\n      },\n    },\n  } = edges[0]\n  return (\n    <Template title={title} description={summary} url={href} image={publicURL}>\n      <Header />\n      <PostHead\n        title={title}\n        date={date}\n        categories={categories}\n        thumbnail={gatsbyImageData}\n      />\n      <PostContent html={html} />\n      <CommentWidget />\n    </Template>\n  )\n}\n\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["PostHeadInfoWrapper","PrevPageIcon","Title","PostData","title","date","categories","onClick","window","history","back","join","PostHeadWrapper","BackgroundImage","props","G","style","position","thumbnail","image","alt","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","edges","data","allMarkdownRemark","href","location","node","frontmatter","summary","gatsbyImageData","childImageSharp","publicURL","Template","description","url","Header"],"sourceRoot":""}